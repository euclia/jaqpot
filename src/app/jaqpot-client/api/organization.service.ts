/**
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials. The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Injectable } from '@angular/core';
import '../rxjs-operators';

// import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Config } from '../../config/config';
import { SessionService } from '../../session/session.service';
import { DialogsService } from '../../dialogs/dialogs.service';
import { OidcSecurityService } from 'angular-auth-oidc-client';
import { BaseClient } from './base.client';
import { HttpClient} from '@angular/common/http';
import { EucliaAccountsFactory, IEucliaAccounts } from '@euclia/accounts-client/dist/EucliaAccounts';
import { Organization } from '@euclia/accounts-client/dist/models/models';

@Injectable()
export class OrganizationService{
    
    _privateBasePath:string;
    private orgnanization:Organization;
    _organizationBase:string
    private accountsClient:IEucliaAccounts
    _token : string

    constructor(http: HttpClient,
        public sessionServise:SessionService,
        public dialogsService:DialogsService,
        public oidcSecurityService: OidcSecurityService){
            // super(http, dialogsService, oidcSecurityService, "/organization/")
            // console.log("Orgs api at:")
            // console.log(Config.AccountsApi)
            this._privateBasePath = Config.JaqpotBase;
            this.accountsClient = new EucliaAccountsFactory(Config.AccountsApi).getClient(),
            this._organizationBase = this._privateBasePath + "/organization/";

            this.oidcSecurityService.getAccessToken().subscribe(t=>{
                this._token = t
            })
        }

        public getOrgById(id:string):Promise<Organization>{
            // const token = this.oidcSecurityService.getToken();
            const token = this._token
            return this.accountsClient.getOrganization(id, token)
        }

        // public searchOrgById(id:string): Observable<Array<Organization>> {
        //     const token = this.oidcSecurityService.getToken();
        //     const tokenValue = 'Bearer ' + token;
        //     let headers = new HttpHeaders().set('Content-Type','application/json').set('Authorization', tokenValue);
        //     let params = new HttpParams().set('orgname', id);
        //     return this.http.get(this._organizationBase + "search/and/found", { headers: headers, params: params }).pipe(
        //         tap((res : Response) => {  
        //             return res      
        //         }),catchError( err => this.dialogsService.onError(err) ));
        // }

        // public removeAffiliation(orgs:Organization[]):Observable<Response>{
        //     const token = this.oidcSecurityService.getToken();
        //     const tokenValue = 'Bearer ' + token;
        //     let headers = new HttpHeaders().set('Content-Type','application/json').set('Authorization', tokenValue);
        //     return this.http.put(this._organizationBase + "affiliations", orgs, { headers: headers }).pipe(
        //         tap((res : Response) => {  
        //             return res      
        //         }),catchError( err => this.dialogsService.onError(err) ));
        // }


    // public updateOrganizationById(id:string, user:User): Observable<User> {
    //     let params = new URLSearchParams();
            
    //     let headers = new Headers({'Content-Type':'application/json'});
    //     const token = this.oidcSecurityService.getToken();
    //     const tokenValue = 'Bearer ' + token;
    //     headers.set('Authorization', tokenValue);
    
    //     return this.http.put(this._userBase + id, user ,{ headers: headers, search: params }).pipe(
    //         map((res : Response) => {  
    //             return res.json()            
    //         }),catchError( err => this.dialogsService.onError(err) ));
    // }

}