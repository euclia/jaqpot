/**
 * Jaqpot API
 * Jaqpot v4 (Quattro) is the 4th version of a YAQP, a RESTful web service which can be used to train
 * machine learning models and use them to obtain toxicological predictions for given chemical compounds or engineered nano materials.
 * The project is written in Java8 and JEE7.
 *
 * OpenAPI spec version: 4.0.3
 * Contact: hampos@me.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import { map, filter, catchError, mergeMap, tap } from 'rxjs/operators';
import { Observable, of } from 'rxjs';
import '../rxjs-operators';

// import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { SessionService } from '../../session/session.service';
import { DialogsService } from '../../dialogs/dialogs.service';
import { OidcSecurityService } from 'angular-auth-oidc-client';
import { BaseClient } from './base.client';
import { HttpClient } from '@angular/common/http';
import {
  EucliaAccountsFactory,
  IEucliaAccounts,
} from '@euclia/accounts-client/dist/EucliaAccounts';
import { Organization } from '@euclia/accounts-client/dist/models/models';
import { environment } from '../../../environments/environment';

@Injectable()
export class OrganizationService {
  _privateBasePath: string;
  _organizationBase: string;
  private accountsClient: IEucliaAccounts;

  constructor(
    http: HttpClient,
    public sessionService: SessionService,
    public dialogsService: DialogsService,
    public oidcSecurityService: OidcSecurityService,
  ) {
    // super(http, dialogsService, oidcSecurityService, "/organization/")
    // console.log("Orgs api at:")
    // console.log(Config.AccountsApi)
    this._privateBasePath = environment.jaqpotApi;
    (this.accountsClient = new EucliaAccountsFactory(
      environment.accountsApi,
    ).getClient()),
      (this._organizationBase = this._privateBasePath + '/organization/');
  }

  public getOrgById(id: string): Promise<Organization> {
    const token = this.oidcSecurityService.getAccessToken();
    return this.accountsClient.getOrganization(id, token);
  }

  // public searchOrgById(id:string): Observable<Array<Organization>> {
  //     const token = this.oidcSecurityService.getAccessToken();
  //     const tokenValue = 'Bearer ' + token;
  //     let headers = new HttpHeaders().set('Content-Type','application/json').set('Authorization', tokenValue);
  //     let params = new HttpParams().set('orgname', id);
  //     return this.http.get(this._organizationBase + "search/and/found", { headers: headers, params: params }).pipe(
  //         tap((res : Response) => {
  //             return res
  //         }),catchError( err => this.dialogsService.onError(err) ));
  // }

  // public removeAffiliation(orgs:Organization[]):Observable<Response>{
  //     const token = this.oidcSecurityService.getAccessToken();
  //     const tokenValue = 'Bearer ' + token;
  //     let headers = new HttpHeaders().set('Content-Type','application/json').set('Authorization', tokenValue);
  //     return this.http.put(this._organizationBase + "affiliations", orgs, { headers: headers }).pipe(
  //         tap((res : Response) => {
  //             return res
  //         }),catchError( err => this.dialogsService.onError(err) ));
  // }

  // public updateOrganizationById(id:string, user:User): Observable<User> {
  //     let params = new URLSearchParams();

  //     let headers = new Headers({'Content-Type':'application/json'});
  //     const token = this.oidcSecurityService.getAccessToken();
  //     const tokenValue = 'Bearer ' + token;
  //     headers.set('Authorization', tokenValue);

  //     return this.http.put(this._userBase + id, user ,{ headers: headers, search: params }).pipe(
  //         map((res : Response) => {
  //             return res.json()
  //         }),catchError( err => this.dialogsService.onError(err) ));
  // }
}
